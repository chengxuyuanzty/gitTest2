空格占位符 &#12288;&#12288;

moment.js 处理日期类库

奇数行：:class="{'active':index%2 != 1}"
偶数行：:class="{'active':index%2 != 0}"
            <img
              :src="items.url ? items.url : require('../../assets/img/default.png')"
              @click="toGoodsDetail(items)"
            >
:page-sizes="[5, 8, 10]"  //这是下拉框可以选择的，每选择一行，要展示多少内容呀

:page-size="pagesize"         //显示当前页的条数

:total="userList.length">    //这是显示总共有多少数据，



currentPage:1, //初始页
pagesize:10,    //    每页的数据


// 初始页currentPage、初始每页数据数pagesize和数据data


handleSizeChange: function (size) {
        this.pagesize = size;
        console.log(this.pagesize)  //每页下拉显示数据
        },
handleCurrentChange: function(currentPage){
        this.currentPage = currentPage;
         console.log(this.currentPage)  //点击第几页
        },

10个数显示一行
for (i=1;i<=100;i++){
document.write(i,' ');
if (i%10==0) document.write('<br>');
}
----------------------------------------------------------------------
js将两个一维数组组成一个键值对的对象
var arr = ["a", "b", "c"];
var brr = [1, 2, 3];
var obj = {};
for (var i = 0; i < arr.length; i++) {
    obj[arr[i]] = brr[i]
}
console.log(obj) //{ a: 1, b: 2, c: 3 }
 
 
function transformObject(keyArr,valueArr) {
    var obj = {};
    keyArr.map( (v,i) => {
        obj[keyArr[i]] = valueArr[i];
    })
    return obj;
}
----------------------------------------------------------------------
过滤格式化日期
  filters: {
    formatDate: function(value) {
      let date = new Date(value)
      let y = date.getFullYear()
      let MM = date.getMonth() + 1
      MM = MM < 10 ? '0' + MM : MM
      let d = date.getDate()
      d = d < 10 ? '0' + d : d
      let h = date.getHours()
      h = h < 10 ? '0' + h : h
      let m = date.getMinutes()
      m = m < 10 ? '0' + m : m
      let s = date.getSeconds()
      s = s < 10 ? '0' + s : s
      return y + '-' + MM + '-' + d + ' ' + h + ':' + m + ':' + s
    }
  },
----------------------------------------------------------------------
                <el-table-column
                  type="selection"
                  :selectable="selectable"
                  width="55">
                </el-table-column>
    // 判断table selected是否可以选中
    selectable(row, index) {
      if (row.state === '待发货') {
        return true
      } else {
        return false
      }
    },
----------------------------------------------------------------------
var s='efsd/sdfsd/sdfdsf/sdf';

var name=s.substring(s.lastIndexOf("/")+1);

console.log(name);//sdf

lastIndexOf()字符从右向左首次出现位置索引；

IndexOf()字符从左向右首次出现位置索引；
-----------------------------------------------------
去除最后一个逗号
var str="1,1,2,2,3，“；
str = str.substr(0,str.length-1);
-----------------------------------
var str = "/asdasf/asfaewf/agaegr/trer/rhh";

var index = str .lastIndexOf("\/");  
str  = str .substring(index + 1, str .length);
alert(str );
----------------------------------------------------------------------
<el-input-number v-model="cycle" @change="vaidateCycle" :min="1" :max="3600"></el-input-number>
vaidateCycle () {
	let re = /^[0-9]+$/
	if (!re.test(this.cycle)) {
		this.$message.error('请输入1~3600之间的正整数！')
		this.$nextTick(() => {
			this.cycle = parseInt(this.cycle)
        })
	}
}
----------------------------------------------------------------------
/**
 * 将"2018-05-19T08:04:52.000+0000"这种格式的时间转化为正常格式
 * @param time
 */
function timeFormat(time) {
    var d = new Date(time);
 
    var year = d.getFullYear();       //年  
    var month = d.getMonth() + 1;     //月  
    var day = d.getDate();            //日  
 
    var hh = d.getHours();            //时  
    var mm = d.getMinutes();          //分  
    var ss = d.getSeconds();           //秒  
 
    var clock = year + "/";
 
    if (month < 10)
        clock += "0";
 
    clock += month + "/";
 
    if (day < 10)
        clock += "0";
 
    clock += day + " ";
 
    if (hh < 10)
        clock += "0";
 
    clock += hh + ":";
    if (mm < 10) clock += '0';
    clock += mm + ":";
 
    if (ss < 10) clock += '0';
    clock += ss;
    return (clock);
}
----------------------------------------------------------------------
    // 税率加百分号
    testCoverages(data) {
      let str = data.replace(/%/g, '')//去除重复添加%
      str += '%'
      if (!data) return false
      this.$set(this.manageLists, 'taxrate', str)
    },
---------------------------------------------------------------------
Array.of()方法
用于将一组值，转换为数组
console.log(Array.of(1,2,3)); //[1, 2, 3]
--------------------------------------------------------------------
Array.from（）
如果参数是一个真正的数组，Array.from()会返回一个一模一样的新数组
Array.from()可以接受第二个参数，用来对每个元素进行处理然后放入返回的数组之中
Array.from()的另一个应用是，将字符串转化成数组，然后返回字符串的长度
因为它能够正确处理各种Unicode字符，可以避JavaScript将大于\uFFFF的Unicode字符算成两个字符的bug
function countSymbols(string) {
  return Array.from(string).length;
}
var obj = {0:1,1:2,2:3,length:3};
var arr = Array.from(obj,x => x*x);
console.log(arr);


let myArray = {'0':'a','1':'b','2':'c',length:3};
let arr = Array.from(myArray);//用于将类数组和可遍历的对象转换为真正的数组
console.log(arr);  //["a", "b", "c"]
--------------------------------------------------------------------
console.log(...[1, 2, 3]); // 1 2 3
------------------------------------------------------------------
//常规的
for(let itme of arr){
    console.log(itme)
}
//我只要key
for(let itme of arr.keys()){
    console.log(itme)
}
//我要键值成对儿的，
for(let itme of arr.entries()){
    console.log(itme)
}
//键值由我控制，想要就要不要就不要
 for(let [index,val] of arr.entries()){
    console.log(index+':'+val)
}
------------------------------------------------------------------
//过滤金额保留两位小数
export const money = function (val) {
   val = val.toString().replace(/\$|\,/g, '');
   if (isNaN(val)) {
     val = "0";
   }
   let sign = (val == (val = Math.abs(val)));
   val = Math.floor(val * 100 + 0.50000000001);
   let cents = val % 100;
   val = Math.floor(val / 100).toString();
   if (cents < 10) {
     cents = "0" + cents
   }
   for (var i = 0; i < Math.floor((val.length - (1 + i)) / 3); i++) {
     val = val.substring(0, val.length - (4 * i + 3)) + ',' + val.substring(val.length - (4 * i + 3));
   }

   return (((sign) ? '' : '-') + val + '.' + cents);
}
----------------------------------------------------------------
var arr3 = [
  {
    "k": "机身颜色",
    "selected": ["红色","黑色"]
  },
  {
    "k": "内存",
    "selected": ["8GB","6GB"]
  },
  {
    "k": "机身存储",
    "selected": ["64GB","256GB"]
  }
]

var result = arr3.reduce((last, spec) => {
    var arr = [];
    // last：上次运算结果
    // el：数组中的当前元素
    last.forEach(o => {
        spec.selected.forEach(option => {
            var obj = {};
           Object.assign(obj,o);
          obj[spec.k] = option;
          arr.push(obj)
        })
    })
    return arr
},[{}]);

console.log(result);
--------------------------------------------------------------
正则表达式
//注：这里我限制了4到30个字符<br>var str = "再找找(asdf)"
var reg = /^[A-Za-z0-9-\(\)\u4e00-\u9fa5]{4,30}$/;
if (!reg.test(str)) {
    alert("验证不通过");
} else {
    alert("验证通过");
}


<script type="text/javascript">
var str="123{xxxx}456[我的]789123[你的]456(1389090)789";
var regex1 = /\((.+?)\)/g;  // () 小括号
var regex2 = /\[(.+?)\]/g;  // [] 中括号
var regex3 = /\{(.+?)\}/g; // {} 花括号，大括号
// 输出是一个数组
console.log(str.match(regex1)); 
console.log(str.match(regex2));
console.log(str.match(regex3));
</script>
var str = '张三(zhang.san)';
var regex1 = /\((.+?)\)/g;
console.log(str.match(regex1))
["(zhang.san)"]



vara='中国111111111111大中国222222222大中国'
varpat=/中国(.*?)大中国/i;
varstr='中国111111111111大中国222222222大中国';
console.info(str.match(pat)[0])//中国111111111111大中国
console.info(str.match(pat)[1])//111111111111

/** 判断字符串中的括号是否对应**/

function bracketsJudge(str){
var arr = str.split("");
num=0;
for(let i=0;i<arr.length;i++){
if(arr[i]==="("){
num ++
}else if(arr[i]===")"){
num --
if(num<0){
console.log("不合法")
return false;
}
}
}
return num
}

/*JS中字符串中带有括号，正则不能识别的解决办法*/

var str = "阿里巴巴(中国)网络技术有限公司深圳办事处";//字符串
 
var keyword = "阿里巴巴(中国)网络技术有限公司";//关键词
 
var reg =keyword .replace(/\(/g,"\\(").replace(/\)/g,"\\)");//针对搜索关键词中有括号的情况，先将括号转换成正则能识别的字符串
 
str = str .replace(new RegExp(reg,'g'),'<i class="txtred">'+keyword+'</i>');//将字符串中包括的关键词高亮显示


--------------------------------------------------------------
vue中有个style有时候会加个scoped属性来防止在单页面下样式污染，但是这个也会出现一个问题，就是有时候我们引用mint-ui或者element-ui的时候会出现写的样式不起作用，其实我们可以简单加个/deep/或>>>就可以解决这个问题
/deep/ 只能用在less或sass中使用
>>> 只能在css中使用，less,sass都不可用
解决tooltip溢出不美观问题
<style  lang="css">
.el-tooltip__popper  {
  max-width: 30%;
  line-height: 30px;
}
</style>
--------------------------------------------------------------
  filters: {
      keepTwoNum(value){
        value = Number(value);
        return value.toFixed(2)
      }
    },

过滤数据
computed:{
        filteredTableData: function () {
          var type = this.currentType;
          return this.tableData.filter(function (data) {
            if(type == '全部'|| type == '' ){
              return true
            }else{
              return data.type == type
            }
          })
        }
    },
---------------------------------------------------------------
    saveTable (item, index) {
      let hintInfo = {
        '合同号': item.contractnumber,
        '合同序号': item.contractserialnumber,
        '协议起始时间': item.successdate,
        '协议结束时间': item.failuredate,
        '单价（不含税）': item.wbhsprice,
        '货币': item.wcurrency,
        '数量': item.count,
        '单位': item.unit,
        '税率标签': item.taxcode
      }
      for (var key in hintInfo) {
        if (hintInfo[key] === '' || hintInfo[key] === undefined || hintInfo[key] === null) {
          this.$message({
            showClose: true,
            message: key + '不能为空',
            type: 'error'
          })
          return
        }
      }
      item.disabled = true
      item.editBtn = true
      this.$set(this.priceList, index, item)
    },
---------------------------------------------------------------
export default {
  data() {
    return {
      MLoading: false
    }
  },

  methods: {
    MLoad(promise, loadingKey = 'MLoading') {
      this.$set(this, loadingKey, true)

      return promise.then(data => {
        this.$set(this, loadingKey, false)
        if (data.code !== 0) {
          return [new Error(data.message)]
        }
        return [null, data]
      }).catch(err => {
        this.$set(this, loadingKey, false)
        return [err]
      })
    }
  }
}
es6解构
      // es6数组解构
     //err = rt,
     //content = rt.content

      const [ err, { content } ] = await this.MLoad(getHistoryList({
        ...this.query,
        pagenum: this.page.pagenum,
        pagesize: this.page.pageSize
      }))
      if (err) return
      this.page.totalCount = content.pageCount
      this.goodsList = content.goodsList
      for (let i = 0; i < this.goodsList.length; i++) {
        this.goodsList[i].selected = false
      }
    },
---------------------------------------------------------------
<input class="output" placeholder="请输入数值">
<input class="rmb" placeholder="人民币样式">
function parseFormatNum(number, n) {

    if (n != 0) {
        n = (n > 0 && n <= 20) ? n : 2;
    }
    number = parseFloat((number + "").replace(/[^\d\.-]/g, "")).toFixed(n) + "";

    // var sub_val = number.split(".")[0].split("").reverse(); //小数点前
    // console.log(sub_val + '小数点前');
    var sub_xs = number.split(".")[1]; //小数点后
    console.log(sub_xs + '小数点后');
    var show_html = "";
    if (number > 0) {
        var sub_val = number.split(".")[0].split("").reverse(); //小数点前
        for (i = 0; i < sub_val.length; i++) {
            show_html += sub_val[i] + ((i + 1) % 3 == 0 && (i + 1) != sub_val.length ? "," : "");
            console.log(show_html)
        }
        if (n == 0) {
            return "￥" + show_html.split("").reverse().join("");
        } else {
            return "￥" + show_html.split("").reverse().join("") + "." + sub_xs;
        }
    } else {
        number = number.replace('-', '')
        var sub_val = number.split(".")[0].split("").reverse(); //小数点前
        // sub_val.replace('-', '');
        console.log(sub_val + 'asfsa');
        for (i = 0; i < sub_val.length; i++) {
            show_html += sub_val[i] + ((i + 1) % 3 == 0 && (i + 1) != sub_val.length ? "," : "");
            console.log(show_html)
        }
        if (n == 0) {
            return "￥" + '-' + show_html.split("").reverse().join("");
        } else {
            return "￥" + '-' + show_html.split("").reverse().join("") + "." + sub_xs;
        }
    }
}

$(".output").on("input", function() {
    $('.rmb').val(parseFormatNum($(this).val(), 2));
});
---------------------------------------------------------------
js截取小数位
function ToolPoint(total, num) {
  if (!total.toString()) {
    return total;
  }
  total = total.toString();
  if (total.indexOf(".") != -1) {
    let point = total.split(".")
    if (point[1].length >= num) {
      total = point[0] + "." + point[1].substring(0, num);
      return total * 1
    } else {
      return total * 1;
    }
  } else {
    return total * 1;
  }
}
$("p").html(ToolPoint(123.12456,2));
---------------------------------------------------------------
    $scope.hoverEvent=function(index){
        $(".more-item").eq(index).addClass('dis-show');
        $(".yb-item").eq(index).addClass('hoverClass');
        // $scope.isShow=true;
    }
    $scope.leaveEvent=function(index){
        $(".more-item").eq(index).removeClass('dis-show');
        $(".yb-item").eq(index).removeClass('hoverClass');
        // $scope.isShow=false;
    }
---------------------------------------------------------------
var normslist = [{
          normsname: '颜色',
          normsparams: '红色'
        },{
          normsname: '内存',
          normsparams: '8G'
        },{
          normsname: '版本',
          normsparams: '版本1'
        }];
var obj = {};
for (var x of normslist){
	if (!!obj[x.normsname]) {
		obj[x.normsname].push(x.normsparams)
	} else {
		obj[x.normsname] = [x.normsparams]
    }
}
console.log(obj)
{颜色: ['红色'] 内存: ['8G'], 版本: ['版本1']}

转成 原始版本

var obj = {'颜色': ['红色'], '内存': ['8G'], '版本': ['版本1']};
var data = []
for (let key of Object.keys(obj)){
	var obj2 = {
		normsname: key,
		normsparams: ''
	}
	for (let i = 0 ; i < obj[key].length; i ++) {
		obj2.normsparams = obj[key][i]
		data.push(obj2)
	}
	
}
console.log(data)
---------------------------------------------------------------
      this.formData.goods.forEach((item, i) => {
        let date = ''
        if (!item.candate) {
          date = 0
        } else {
          date = item.candate
        }
        var myDate = new Date()
        myDate.setDate(myDate.getDate() + parseFloat(date))
        this.formData.goods[i].date = new Date(myDate).getFullYear() + '-' + (new Date(myDate).getMonth() + 1) + '-' + new Date(myDate).getDate()
      })
---------------------------------------------------------------
http://www.shsfhb?session="634fg3456fdg45"
 var sessioncookie = window.location.href.split('?session=')
        if (sessioncookie[1]) {
            // 把session赋值给cookie(按自己公司的要求拼接字符串)
            document.cookie = 'GW_SESSION=' + sessioncookie[1] + ';path=/'
 }
-----------------------------------------------------------
<span class="other">其他<i class="el-icon-arrow-down el-icon--right icon-arrow"/></span>
.icon-arrow{
    transition: all 0.2s ease-in-out;
    -webkit-transition: all 0.2s ease-in-out;
    -moz-transition: all 0.2s ease-in-out;
    -o-transition: all 0.2s ease-in-out;
  }
  .other:hover .icon-arrow{
    transform: rotate(180deg);
    -webkit-transform: rotate(180deg);
    -moz-transform: rotate(180deg);
    -o-transform: rotate(180deg);
    -ms-transform: rotate(180deg);
}

<div class="rotate">rotate</div>
.rotate {
        width: 100px;
        height: 100px;
        background-color: #92B901;
        -webkit-transition:-webkit-transform 2s;
       }
 
       .rotate:hover {
        -webkit-transform:rotate(360deg);
       }
---------------------------------------------------------
---------------------------------------------------------
　　正则表达式验证6到10个字符串或数字的长度： ^[a-zA-Z0-9]{6,10}$
　　验证数字的正则表达式
　　验证数字：^[0-9]*$
　　验证n位的数字：^\d{n}$
　　验证至少n位数字：^\d{n,}$
　　验证m-n位的数字：^\d{m,n}$
　　验证零和非零开头的数字：^(0|[1-9][0-9]*)$
　　验证有两位小数的正实数：^[0-9]+(.[0-9]{2})?$
　　验证有1-3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$
　　验证非零的正整数：^\+?[1-9][0-9]*$
　　验证非零的负整数：^\-[1-9][0-9]*$
　　验证非负整数（正整数 + 0） ^\d+$
　　验证非正整数（负整数 + 0） ^((-\d+)|(0+))$
　　验证长度为3的字符：^.{3}$
　　验证由26个英文字母组成的字符串：^[A-Za-z]+$
　　验证由26个大写英文字母组成的字符串：^[A-Z]+$
　　验证由26个小写英文字母组成的字符串：^[a-z]+$
　　验证由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$
　　验证由数字、26个英文字母或者下划线组成的字符串：^\w+$
　　验证用户密码:^[a-zA-Z]\w{5,17}$ 正确格式为：以字母开头，长度在6-18之间，只能包含字符、数字和下划线。
　　验证是否含有 ^%&',;=?$\" 等字符：[^%&',;=?$\x22]+
　　验证汉字：^[\u4e00-\u9fa5],{0,}$
　　验证Email地址：^\w+[-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$
　　验证InternetURL：^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$ ；^[a-zA-z]+://(w+(-w+)*)(.(w+(-w+)*))*(?S*)?$
　　验证电话号码：^(\(\d{3,4}\)|\d{3,4}-)?\d{7,8}$：--正确格式为：XXXX-XXXXXXX，XXXX-XXXXXXXX，XXX-XXXXXXX，XXX-XXXXXXXX，XXXXXXX，XXXXXXXX。
　　验证身份证号（15位或18位数字）：^\d{15}|\d{}18$
　　验证一年的12个月：^(0?[1-9]|1[0-2])$ 正确格式为：“01”-“09”和“1”“12”
　　验证一个月的31天：^((0?[1-9])|((1|2)[0-9])|30|31)$ 正确格式为：01、09和1、31。
　　整数：^-?\d+$
　　非负浮点数（正浮点数 + 0）：^\d+(\.\d+)?$
　　正浮点数 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$
　　非正浮点数（负浮点数 + 0） ^((-\d+(\.\d+)?)|(0+(\.0+)?))$
　　负浮点数 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$
　　浮点数 ^(-?\d+)(\.\d+)?$
---------------------------------------------------------
 1 var arr = [{"name":"hhh"},{"name":"dddd"}]
 2 
 3 //用js
 4 function getTextByJs() {
 5     var str = "";
 6     for (var i = 0; i < arr.length; i++) {
 7         str += arr[i].name+ ",";
 8     }
 9     //去掉最后一个逗号(如果不需要去掉，就不用写)
10     if (str.length > 0) {
11         str = str.substr(0, str.length - 1);
12     }
13     return str;
14 }
15 //输出结果: hhh,dddd
//用jquery
function getTextByJquery() {
    var str = "";
    arr.each(function () {
        str += $(this).name.val() + ",";
    });
    //去掉最后一个逗号(如果不需要去掉，就不用写)
    if (str.length > 0) {
        str = str.substr(0,str.length - 1);
    }
    return str;
}
//输出结果: hhh,dddd
----------------------------------------------------

@close = closeModuleDialog()

closeModuleDialog(){
this.moduleDialog= false

this.clearVail()
}
clearVail(){
this.$refs['forgetPass'].clearValidate()
}





table 选中在table下方显示选中的数据

const newArr = [];
this.checkedDataList.map((item) => newArr.findIndex(({
 id
}) => id === item.id) === -1 && newArr.push(item));
      this.checkedDataList = newArr;

indexOf去重
var arr = [1, 1, 1, 2, 3, 3, 4, 5];
var myArry = []; //定义一个新的数组
for (var i = 0; i < arr.length; i++) {
    if (myArry.indexOf(arr[i]) == -1) { //根据索引值来判断myArry数组中有没有存在该元素，indexOf(i)==-1就是没有该元素
        myArry.push(arr[i])  //把遍历到的值添加到myArry数组中去
    }
}


var arr = [1, 2, 2, 3, 4, 5, 5, 6, 7, 7,8,8,0,8,6,3,4,56,2];
var arr2 = arr.filter((x, index,self)=>self.indexOf(x)===index)  
console.log(arr2); //[1, 2, 3, 4, 5, 6, 7, 8, 0, 56]

var arr = ['10','12','23','44','42']
var newArr = arr.filter(item => item.indexOf('2')<0) 
console.log(newArr)

var arr = [20,30,50, 96,50]
var newArr = arr.filter(item => item>40)  
console.log(newArr)


    // 高级搜索
    highSearch () {
      this.searchForm.pageNum = 1
      this.searchForm.period = this.month ? this.month.split('-')[0] + '' + this.month.split('-')[1] : ''
      delete this.searchForm.keyWord
      this.getTabList(this.searchForm)
    },

data() {
    const validatePhone = (rule, value, callback) => {
      if (value === '') {
        callback(new Error('手机号不能为空'))
      } else {
        callback()
      }
    }
    const validateIps = (rule, value, callback) => {
      if (value === '') {
        callback(new Error('请输入IP'))
      } else {
        if (isIpList(value)) {
          callback()
        } else {
          callback(new Error('ip格式错误,多个ip请用英文逗号分隔！'))
        }
      }
    }
    return{
      rules: {
        phone: [
          { required: true, validator: validatePhone, trigger: 'blur' }
        ],
        ips: [
          { validator: validateIps, trigger: 'blur' }
        ]
      }
    }
  }


    timeOut(time) {
      let time1 = Date.parse(Date())
      let time2 = Date.parse(time)
      return time2 < time1
    },

      this.formData.goodslist.forEach((item, i) => {
        let date = ''
        if (!item.candate) {
          date = 0
        } else {
          date = item.candate
        }
        var myDate = new Date()
        myDate.setDate(myDate.getDate() + parseFloat(date))
        this.formData.goodslist[i].date = new Date(myDate).getFullYear() + '-' + (new Date(myDate).getMonth() + 1) + '-' + new Date(myDate).getDate()
      })

  data() {
    var validatePass2 = (rule, value, callback) => {
      if (value === '') {
        callback(new Error('请再次输入密码'))
      } else if (value !== this.forgetPassForm.newpassword) {
        callback(new Error('两次输入密码不一致!'))
      } else {
        callback()
      }
    }

    // 判断是否区号
    verifyArea() {
      var reg = /^0\d{2,3}/
      if (!reg.test(this.formData.area)) {
        this.$message('您输入的区号的格式不正确！')
        this.formData.area = ''
      }
    },
    // 判断是否电话号码
    verifyTelephone() {
      var reg = /^\d{7,8}$/
      if (!reg.test(this.formData.telephone)) {
        this.$message('您输入的电话号码的格式不正确！')
        this.formData.telephone = ''
      }
    },
    // 判断是否电话
    verifyPhone() {
      var reg = /^[1][3,4,5,7,8][0-9]{9}$/
      if (!reg.test(this.formData.phone)) {
        this.$message('您输入的手机号的格式不正确！')
        this.formData.phone = ''
      }
    },
    // 判断是否邮箱
    verifyEmail() {
      var reg = /^[a-z0-9]+([._\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/
      if (!reg.test(this.formData.email)) {
        this.$message('您输入的邮箱的格式不正确！')
        this.formData.email = ''
      }
    },

    timeTem(time) {
      let time1 = Date.parse(Date())
      let time2 = Date.parse(time)
      return time2 > time1
    },


    var validateInput = (rule, value, callback) => {
      if (!checkSpecialKey(value)) {
        callback(new Error('不能含有特殊字符！！'))
      } else {
        callback()
      }
    }
    var validateInput = (rule, value, callback) => {
      var reg = /^[1][3,4,5,7,8][0-9]{9}$/
      if (!reg.test((value))) {
        callback(new Error('您输入的手机号的格式不正确！'))
      } else {
        callback()
      }
    }
{ validator: validateInput, trigger: ['blur', 'change'] },




   getLastMonth() { // 获取上个月日期
      var date = new Date()
      var year = date.getFullYear()
      var month = date.getMonth()
      if (month === 0) {
        year = year - 1
        month = 12
      }
      month = month < 10 ? '0' + month : month
      return year + '-' + month
    },

    // 日期格式
    crtTimeFtt(val) {
      if (val !== null) {
        var date = new Date(val)
        let year = date.getFullYear()
        let m = (date.getMonth() + 1) < 10 ? '0' + (date.getMonth() + 1) : (date.getMonth() + 1)
        let day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate()
        return year + '-' + m + '-' + day
      }
    },
    // 日期格式
    crtTimeHms(val) {
      if (val !== null) {
        var date = new Date(val)
        let year = date.getFullYear()
        let month = (date.getMonth() + 1) < 10 ? '0' + (date.getMonth() + 1) : (date.getMonth() + 1)
        let day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate()
        let H = date.getHours() < 10 ? '0' + date.getHours() : date.getHours()
        let M = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()
        let S = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds()
        return year + '-' + month + '-' + day + ' ' + H + ':' + M + ':' + S
      }
    },

/**
 * 处理空的参数
 * @param datas
 * @returns
 */
function cleanParams(datas){
	var v_data ={};
	for(var a in datas){
		if (datas[a] != null && datas[a] instanceof Array) {
			v_data[a]=[];
		}else {
			v_data[a] = null;
		}
	}
	return v_data;
}



Vue.prototype.HOST = `${process.env.HOST_URL}/file/certification`

const defaultOptions = {
  name: 'file',
  url: `${process.env.HOST_URL}/file/certification`,
  fileSize: 2,
  limit: 1,
  buttonText: '上传',
  fileList: []
}





          let content = rt.content
          this.noJdGoodsDetailForm = content
          let urlidArr = content.urlid.split(',')
          let picUrlList = urlidArr.map((item, index) => {
            return {
              url: content.url[index],
              urlid: item
            }
          })


    closeDialog(formName) {
      this.dialogFormVisible = false
      if (this.$refs[formName] !== undefined) { //click弹出的时候$refs并没有获取到dom元素导致 'resetFields' of undefined 
        this.$refs[formName].resetFields()
      }
    },

Object.prototype.score = '97';
let people = {
    name:'小红',
    age : 15,   
}
for(let key in people ){
if(!Object.prototype.hasOwnProperty.call(people,key)) continue;
    console.log(key+':'+people[key]);
}
>>>>>>
>name:小红
>age:1


para.birth = (!para.birth || para.birth == '') ? '' : util.formatDate.format(new Date(para.birth), 'yyyy-MM-dd');


    // 导出模板
    getExportModule (type) {
      getExportModule(type).then(res => {
        if (res) {
          let aEle = document.createElement('a')
          aEle.setAttribute('href', res.url)
          aEle.setAttribute('download', res.newName)
          aEle.click()
        }
      })
    },

//清空el-input-number默认值
<el-input-number @focus="handlerInputNumberFocus" :min="0"></el-input-number>

handlerInputNumberFocus(e){
if(e.target.value === '0'){
	e.target.value = ''
}
}

JSON.parse(JSON.stringifg(row))

let host = location.href.match(/^http.+#/)[0]
window.open(host + '/houseRent/contractDetails')


    // 表单内容去首尾空格
    handlerBlurRemoveSpace (prop) {
      this.mainContractInfo[prop] = this.mainContractInfo[prop].replace(/(^ +)|( +$)/g, '')
      // replace(/(^ +)|( +$)/g, '')
    },

//自动计算免租天数
getFreeDays(row, index) {
if(row.startDate && row.endDate){
let result = new Date(row.endDate).getTime() = new Date(row.startDate).getTime()
result = result / (24 * 60 * 60 *1000) +1
let item = this.freeRentPeriodTableData[index]
this.$set(this.freeRentPeriodTableData, index, Object.assign({}, item, {rentFreeDays:result}))
}
}
--------------------------------------------------------------------------------
promise

// export async function login(params) {
//   const res = await fetch({
//     url: '/loginuser',
//     method: 'GET',
//     params,
//     loading: true
//   }).catch(e => Promise.reject(e))
//   if (res.code === 0) {
//     store.commit('setUserInfo', res.content)
//   }
//   return Promise.resolve(res)
// }

--------------------------------------------------

router.beforeEach(async (to, from, next) => {
})
    const rt = await loginGetToken()
    console.log(rt)
    if (rt && rt.content.token) {
      localStorage.setItem('token', rt.content.token)
    }

export async function loginGetToken(params) {
  const rt = await fetch({
    url: '/getaccesstoken',
    method: 'GET',
    params
  }).catch(e => Promise.reject(e))
  return Promise.resolve(rt)
}
--------------------------------------------------------
    const rt = loginGetToken().then(res => {
      console.log(res)
    })
    console.log(rt)

export async function loginGetToken(params) {
  const rt = await fetch({
    url: '/getaccesstoken',
    method: 'GET',
    params
  })
  return rt
}

--------------------------------------------------------
      getOrganizationTree().then((rt) => {
        this.loading = false
        this.content = rt
      }).catch(() => {
        this.loading = false
      })

// 获取组织树
function filterArray(data, pid) {
  const tree = []
  for (var i = 0; i < data.length; i++) {
    if (data[i].pid === pid) {
      const obj = data[i]
      const temp = filterArray(data, data[i].id)
      if (temp.length > 0) {
        obj.children = temp
      }
      tree.push(obj)
    }
  }
  return tree
}
export async function getOrganizationTree(params) {
  const rt = await fetch({
    url: '/common/searchCompanyLargearea/treelist',
    method: 'GET',
    params
  }).catch(e => Promise.reject(e))
  const data = filterArray(rt.content, 0)
  return Promise.resolve(data)
}
------------------------------------------------------------
export function refeshUserInfo() {
  return new Promise((resolve, reject) => {
    fetch({
      url: '/OauthLoginUser',
      method: 'GET',
      params: {
        access_token: localStorage.getItem('token')
      }
    }).then(rt => {
      if (rt.content.userid) {
        store.commit('app/setUserInfo', rt.content)
        resolve(rt)
      } else {
        localStorage.removeItem('token')
      }
    }).catch(e => {
      localStorage.removeItem('token')
      reject(e)
    })
  })
}






mounted:{
        this.getGoodsDetails(this.ids, type, code).then(data => {
          this.rtData = data
          if (this.rtData.goods[0].supplier === '京东') {
            this.purtype = '京东采购'
          } else {
            this.purtype = '非京东采购'
          }
        })
}
methods:{
    getGoodsDetails (id, type, code) {
      let that = this
      that.loading = true
      return new Promise(function (resolve, reject) {
        getpurchaseBilData({
          ids: id,
          userid: that.$store.state.app.userInfo.userid,
          materialClassify: code
        }).then((rt) => {
          if (rt.code === 0) {
            that.loading = false
            resolve(rt.content)
          }
        }).catch((err) => {
          console.log(err)
        })
      })
    },
}

-------------------------------------------------------------------------------
    getExportLink () {
      if (this.recordsList.length === 0) {
        this.$message({
          type: 'warning',
          showClose: true,
          duration: 0,
          message: this.$t('elseText.noDataToExport')
        })
        return
      }
      this.exportLink = testUrl + '/prada/housingContract/accrualRecordExport'
      let list = ['keyWord', 'period', 'accrualNum', 'createby']
      let paramstring = '?'
      for (let key in this.searchForm) {
        if (list.indexOf(key) > -1) {
          paramstring += (key + '=' + this.searchForm[key] + '&')
        }
      }
      this.exportLink += paramstring.slice(0, -1)
      window.open(this.exportLink)
    },

var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
arr.slice(0,-1); // 从索引0开始，到索引最后一个结束，不包括最后索引项
 
(6)?["A", "B", "C", "D", "E", "F"]//控制台输出
 
var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
arr.slice(-1); //最后索引项的获取
 
["G"]//控制台输出
 
var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
arr.slice(0,6); // 从索引0开始，到索引6结束，不包括最后索引项
 
(6)?["A", "B", "C", "D", "E", "F"]//控制台输出
 
var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
arr.slice(0,7); //  从索引0开始，到索引6结束，获取全部元素
 
(7)?["A", "B", "C", "D", "E", "F", "G"]
 
var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
arr.slice(); // 默认获取全部元素
 
(7)?["A", "B", "C", "D", "E", "F", "G"]
 
var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
arr.slice(-2,-1); // 倒序索引6开始，倒数第二个元素
 
["F"]//控制台输出
 
var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
arr.slice(-3,-1); // 倒序索引6开始，倒数第3个元素开始，不包括最后一个元素
 
(2)?["E", "F"]//控制台输出
-------------------------------------------------------------------------------
<input  @keydown="checkInput($event)" type="number">
checkInput(e){
  let prohibitInput= ["-", "e", "+", "E"];
  if(prohibitInput.includes(e.key)){
    e.preventDefault();
  }
}
//输入纯数字
<input  type="text" @input = "msg=msg.replace(/[^\d]/g,'')" v-model="msg">

在input属性上加上:
onKeypress=”return (/[\d]/.test(String.fromCharCode(event.keyCode)))”
-------------------------------------------------------------------------------
var deepCopy = function(o) {
    if (o instanceof Array) {  //先判断Array
        var n = [];
        for (var i = 0; i < o.length; ++i) {
            n[i] = deepCopy(o[i]);
        }
        return n;

    } else if (o instanceof Object) {
        var n = {}
        for (var i in o) {
            n[i] = deepCopy(o[i]);
        }
        return n;
    } else {
        return o;
    }
}
在JS里，除Array和Object之外的数据类型的复制可以直接通过等号=来实现，但Array和Object类型的数据通过等号只是起引用作用，指向的是同一块内存地址。当源数据改变，引用的数据也同时会发生变化。


function removeRepetition(str){
        var result="";
        len=str.length;    //一定要现将str的长度先取出来，因为在循环的时候每次切割字符串是会改变字符串长度的
        for(var i=0 ; i<len;i++){
            if(str[0]==str[1]){
                str=str.slice(1);
            }else{
                result=result+str[0];
                str=str.slice(1);
            }
        }
        return result;
    }
// 测试用例


console.log(removeRepetition("aaa")); // ->a
console.log(removeRepetition("abbba")); // ->aba
console.log(removeRepetition("aabbaabb")); // ->abab
console.log(removeRepetition("")); // ->
console.log(removeRepetition("abc")); // ->abc
console.log(removeRepetition("aaaaaaaaaaaabsssssssssssssscddddddddddddddddd")); // ->abc


  filters: {
    ellipsis (value) {
      if (!value) return ''
      if (value.length > 80) {
        return value.slice(0, 80) + '...'
      }
      return value
    }
  },
  filters: {
    formatStatus (val) {
      return val === '1' ? '好评' : val === '2' ? '中评' : val === '3' ? '差评' : ''
    }
  },
//保留小数点后两位的过滤器，尾数四舍五入
filters: {
  numFilter (value) {
    let realVal = ''
    if (value) {
      // 截取当前数据到小数点后两位
      realVal = parseFloat(value).toFixed(2)
    } else {
      realVal = '--'
    }
    return realVal
  }
}
保留小数点后两位的过滤器，尾数不四舍五入
filters: {
  numFilter (value) {
    let realVal = ''
    if (value) {
      // 截取当前数据到小数点后三位
      let tempVal = parseFloat(value).toFixed(3)
      realVal = tempVal.substring(0, tempVal.length - 1)
    } else {
      realVal = '--'
    }
    return realVal
  }
}
-------------------------------------------------
vue 自定义过滤器 格式化金额（保留两位小数）
import Vue from 'vue'

Vue.filter('money', function(val) {
    val = val.toString().replace(/\$|\,/g,'');
    if(isNaN(val)) {
      val = "0";  
    } 
    let sign = (val == (val = Math.abs(val)));
    val = Math.floor(val*100+0.50000000001);
    let cents = val%100;
    val = Math.floor(val/100).toString();
    if(cents<10) {
       cents = "0" + cents
    }
    for (var i = 0; i < Math.floor((val.length-(1+i))/3); i++) {
        val = val.substring(0,val.length-(4*i+3))+',' + val.substring(val.length-(4*i+3));
    }

    return (((sign)?'':'-') + val + '.' + cents);
})


// 给数字加千位分隔符
Vue.filter('formateNumber', function (val) {
  let result
  if (typeof val === 'number') {
    result = val
  } else if (typeof val === 'string') {
    result = parseFloat(val)
  }
  return result && result.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,')
})
------------------------------------------

const {loading, toast=loading} = config
解析：var loading = config.loading,
          _config$toast = config.totast,
         toast = _config$toast === undefined ? loading : _config$toast; 

去重排序
 console.log([...new Set(materialclassifyArr)].sort((a, b) => a < b ? -1 : 1), 'materialclassify')


------------------------------------------------------------------------------
flatMap()方法对原数组的每个成员执行一个函数，相当于执行Array.prototype.map(),然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。
// 相当于 [[2, 4], [3, 6], [4, 8]].flat()
[2, 3, 4].flatMap((x) => [x, x * 2])
// [2, 4, 3, 6, 4, 8]
flatMap()只能展开一层数组
------------------------------------------------------------------------------
git config --global user.name ""
git config --global user.email ""

git init 创建

git add readme.txt    {git add . （将当前工作区的所有文件存放到暂存区）}

git commit -m 'readme.txt'


git remote add origin master "https://github.com/starForLove/weixin-buycar"

git push origin master

如果出现上传不成功，可能是因为你远程仓库已经存在文件，和你本地仓库文件不一致，或者你本地仓库的文件不是最新的，这个时候，你需要执行下面这行命令：
git pull origin master

将远程仓库的文件重新下载到本地仓库，然后执行
git push orgin master

 git --help 帮助命令
git pull origin master 将远程仓库里面的项目拉下来
 dir  查看有哪些文件夹
使用git删除github上的文件夹
git rm -r --cached .idea  #--cached不会把本地文件.idea删除
git commit -m '备注'
git push -u origin master




1、添加所有文件到暂存区
不加参数默认为将修改操作的文件和未跟踪新添加的文件添加到git系统的暂存区，注意不包括删除。
git add *
git add .
git add -u .
-u 表示将已跟踪文件中的修改和删除的文件添加到暂存区，不包括新增加的文件，注意这些被删除的文件被加入到暂存区再被提交并推送到服务器的版本库之后这个文件就会从git系统中消失了。
git add -A .
-A 表示将所有的已跟踪的文件的修改与删除和新增的未跟踪的文件都添加到暂存区。

添加某个文件类型到暂存区，比如所有的 .html 文件。
git add *.html

添加整个文件夹到暂存区，比如根目录的 index 文件夹。
git add index/
添加某个文件或者某个文件夹中的某个文件到暂存区 ，比如 index 下的 index.html 文件。
git add index/index.html

一些自动生成的，比如日志文件，或者编译过程中创建的临时文件等，不需要纳入 Git 的管理，在这种情况下，我们可以创建一个名为 .gitignore 的文件，来跳过上传。
--------------------------------------------------------------------------------
https://github.com/MrZHLF/vue-admin-system

vscode  snippet设置自动生成vue组件代码块

node 中间层 
node框架 express koa egg.js

模板引擎 art-template

核心模块
app.js核心文件
router模块 路由
controller模块 方法
model模块 数据

优化
缓存
redis缓存
nginx


node能做的
搭建全站
中间层开发
模拟数据接口
制作项目构建工具

不再简单地前端：
1、利用node去把项目优化
2、利用webpack,配合上自己的手写的工具，让前端团队更好工作
3、开发组件库、工具库与团队标准
4、探索最适合项目的前端架构